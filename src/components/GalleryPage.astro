---
interface ImageData {
  src: string;
  alt: string;
  description?: string;
}

const props = Astro.props as { images: ImageData[] };
---

<section class="gallery-container">
  <div class="gallery">
    {props.images.map((image) => (
      <div class="gallery-item">
        <img
          src={image.src}
          alt={image.alt}
          loading="lazy"
          data-src={image.src}
          data-alt={image.alt}
          data-desc={image.description || "No description available"}
        />
      </div>
    ))}
  </div>
</section>

<div id="lightbox" class="lightbox hidden">
  <div class="lightbox-content">
    <span id="close-lightbox" class="close-x">&times;</span>
    <img id="lightbox-img" src="" alt="" />
    <div id="lightbox-text">
      <p id="lightbox-alt"></p>
      <p id="lightbox-desc"></p>
    </div>
  </div>
</div>

<style>
  /* Center the gallery */
  .gallery-container {
    display: flex;
    justify-content: center;
    padding: 2rem 0;
  }

  .gallery {
    max-width: 1200px;
    width: 90%;
    column-count: 3;
    column-gap: 10px;
    padding: 1rem;
  }

  .gallery-item {
    display: inline-block;
    width: 100%;
    margin-bottom: 10px;
    break-inside: avoid;
  }

  .gallery-item img {
    width: 100%;
    display: block;
    border-radius: 5px;
    cursor: pointer;
    transition: transform 0.2s ease-in-out;
  }

  .gallery-item img:hover {
    transform: scale(1.05);
  }

  /* Lightbox Styles */
  .lightbox {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    visibility: hidden;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }

  .lightbox.show {
    visibility: visible;
    opacity: 1;
  }

  .lightbox-content {
    position: relative;
    max-width: 80%;
    max-height: 90%;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .lightbox img {
    max-width: 100%;
    max-height: 90vh;
    border-radius: 8px;
  }

  /* Move text inside the image */
  #lightbox-text {
    position: absolute;
    bottom: 10px;
    width: 100%;
    text-align: center;
    background: rgba(0, 0, 0, 0.6);
    color: white;
    padding: 5px 0;
    font-size: 14px;
    border-radius: 5px;
  }

  /* Fixed Close Button */
  .close-x {
    position: absolute;
    top: 10px;
    right: 15px;
    font-size: 24px;
    color: white;
    cursor: pointer;
    background: rgba(0, 0, 0, 0.6);
    border-radius: 50%;
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    line-height: 1;
    font-family: Arial, sans-serif;
  }

  .close-x:hover {
    background: rgba(255, 255, 255, 0.6);
    color: black;
  }

  /* Responsive Fixes */
  @media (max-width: 1024px) {
    .gallery {
      column-count: 2;
      max-width: 800px;
    }
  }

  @media (max-width: 768px) {
    .gallery {
      column-count: 1;
      max-width: 600px;
    }
  }

  @media (max-width: 480px) {
    .gallery {
      column-count: 1;
      max-width: 100%;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const images = document.querySelectorAll(".gallery-item img") as NodeListOf<HTMLImageElement>;
    const lightbox = document.getElementById("lightbox") as HTMLDivElement | null;
    const lightboxImg = document.getElementById("lightbox-img") as HTMLImageElement | null;
    const lightboxAlt = document.getElementById("lightbox-alt") as HTMLParagraphElement | null;
    const lightboxDesc = document.getElementById("lightbox-desc") as HTMLParagraphElement | null;
    const closeBtn = document.querySelector(".close-x") as HTMLSpanElement | null;

    if (!lightbox || !lightboxImg || !lightboxAlt || !lightboxDesc || !closeBtn) {
      console.error("Lightbox elements not found");
      return;
    }

    images.forEach(img => {
      img.addEventListener("click", (e) => {
        const target = e.target as HTMLImageElement | null;
        if (!target) return;

        lightboxImg.src = target.getAttribute("data-src") || "";
        lightboxAlt.textContent = target.getAttribute("data-alt") || "";
        lightboxDesc.textContent = target.getAttribute("data-desc") || "";
        lightbox.classList.add("show");
      });
    });

    closeBtn.addEventListener("click", () => {
      lightbox.classList.remove("show");
    });

    lightbox.addEventListener("click", (e) => {
      if (e.target === lightbox) lightbox.classList.remove("show");
    });
  });
</script>
