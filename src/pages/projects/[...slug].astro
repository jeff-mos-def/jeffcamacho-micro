---
import { type CollectionEntry, getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Container from "@components/Container.astro";
import FormattedDate from "@components/FormattedDate.astro";
import { readingTime } from "@lib/utils";
import BackToPrevious from "@components/BackToPrevious.astro";
import Link from "@components/Link.astro";
import TableOfContents from "@components/TableOfContents.astro";
import Giscus from "@components/Giscus.astro";
import Lightbox from "@components/Lightbox.astro";
import StatusBadge from "@components/StatusBadge.astro"; // Import StatusBadge

export async function getStaticPaths() {
  const projects = (await getCollection("projects"))
    .filter((post) => !post.data.draft)
    .sort((a, b) => new Date(b.data.startDate).valueOf() - new Date(a.data.startDate).valueOf());
  return projects.map((project) => ({
    params: { slug: project.slug },
    props: project,
  }));
}
type Props = CollectionEntry<"projects">;

const project = Astro.props;
const { Content, headings } = await project.render();
---

<Layout title={project.data.title} description={project.data.description}>
  <Container>
    <div class="animate">
      <BackToPrevious href="/projects">Back to projects</BackToPrevious>
    </div>
    <div class="animate my-10 space-y-1">
      <div class="flex items-center gap-1.5">
        <!-- Ensure `date` is always defined -->
        <div class="font-base text-sm">
          <FormattedDate date={project.data.date ?? new Date()} />
        </div>
        &bull;
        <div class="font-base text-sm">
          {readingTime(project.body)}
        </div>
      </div>
      <h1 class="text-3xl font-semibold text-black dark:text-white">
        {project.data.title}
      </h1>
      {
        (project.data.demoURL || project.data.repoURL) && (
          <nav class="flex gap-1">
            {project.data.demoURL && (
              <Link href={project.data.demoURL} external>
                demo
              </Link>
            )}
            {project.data.demoURL && project.data.repoURL && <span>/</span>}
            {project.data.repoURL && (
              <Link href={project.data.repoURL} external>
                repo
              </Link>
            )}
          </nav>
        )
      }

      <!-- FIXED DATE FORMATTING -->
      <div class="text-sm text-black/60 dark:text-white/60">
        Projected Start Date: <FormattedDate date={project.data.startDate ?? new Date()} /> - 
        Projected End Date: {project.data.endDate !== 'TBD' 
          ? <FormattedDate date={project.data.endDate ?? new Date()} />
          : 'TBD'}
      </div>

      <!-- Use the StatusBadge Component -->
      <div class="mt-2">
        <StatusBadge status={project.data.status} />
      </div>
    </div>
    <TableOfContents headings={headings} />
    <article class="animate blog-content"> <!-- Added blog-content class -->
      <Content />
    </article>
    <div class="mt-24">
      <Giscus />
    </div>
    <Lightbox /> <!-- Added Lightbox component -->
  </Container>
</Layout>
