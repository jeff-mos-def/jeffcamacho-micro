---
import { getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Container from "@components/Container.astro";
import TableOfContents from "@components/TableOfContents.astro";
import { WORK } from "@consts";
import type { CollectionEntry } from "astro:content";

const workEntries = await getCollection("work");

const renderedEntries = await Promise.all(
  workEntries.map(async (entry) => {
    const { Content } = await entry.render();
    return { ...entry, Content };
  })
);

const tableOfContents = [
  { title: "Work Experience", id: "work-experience" },
  { title: "Entrepreneurial Experience", id: "entrepreneurial-experience" },
  { title: "Volunteer Experience", id: "volunteer-experience" },
];

function formatDate(date: Date | string | number): string {
  const parsedDate = new Date(date);
  return parsedDate.toLocaleDateString("en-US", {
    month: "short",
    year: "numeric",
  });
}
---

<Layout title={WORK.TITLE} description={WORK.DESCRIPTION}>
  <Container>
    {/* Table of Contents */}
    <details open class="animate rounded-lg border border-black/15 dark:border-white/20">
      <summary class="cursor-pointer rounded-t-lg px-3 py-1.5 font-medium transition-colors hover:bg-black/5 dark:hover:bg-white/5 bg-black/5 dark:bg-white/5">
        Table of Contents
      </summary>
      <nav>
        <ul class="py-3">
          {tableOfContents.map((item) => (
            <li class="list-inside list-disc px-6 py-1.5 text-sm">
              <a href={`#${item.id}`} target="_self" class="inline-block decoration-black/30 dark:decoration-white/30 hover:decoration-black/50 focus-visible:decoration-black/50 dark:hover:decoration-white/50 dark:focus-visible:decoration-white/50 text-current hover:text-black focus-visible:text-black dark:hover:text-white dark:focus-visible:text-white transition-colors duration-300 ease-in-out underline underline-offset-[3px]">
                {item.title}
              </a>
            </li>
          ))}
        </ul>
      </nav>
    </details>

    <aside data-pagefind-ignore>
      <br/><br/>
      {/* Divider */}
      <hr class="border-t border-zinc-200 dark:border-zinc-700" />
      <br/><br/>
        {/* Work Experience Section */}
        <div id="work-experience" class="space-y-6">
          <h2 class="animate text-lg font-semibold text-zinc-800 dark:text-zinc-200 underline underline-offset-4">
            Work Experience
          </h2>
          <ul class="animate not-prose flex flex-col gap-8">
            {renderedEntries
              .filter((entry) => entry.data.type === "work")
              .map((entry) => (
                <li class="space-y-2">
                  <div class="text-sm text-zinc-500 dark:text-zinc-400">
                    {formatDate(entry.data.dateStart)} -{" "}
                    {entry.data.dateEnd === "Current" ? "Current" : formatDate(entry.data.dateEnd)}
                  </div>
                  <div class="text-lg text-zinc-800 dark:text-zinc-100">{entry.data.company}</div>
                  <div class="text-zinc-500 dark:text-zinc-400">{entry.data.role}</div>
                  <div class="prose dark:prose-invert">
                    <entry.Content />
                  </div>
                </li>
              ))}
          </ul>
        </div>
        <br/><br/>
        {/* Divider */}
        <hr class="border-t border-zinc-200 dark:border-zinc-700" />
        <br/><br/>
        {/* Entrepreneurial Experience Section */}
        <div id="entrepreneurial-experience" class="space-y-6">
          <h2 class="animate text-lg font-semibold text-zinc-800 dark:text-zinc-200 underline underline-offset-4">
            Entrepreneurial Experience
          </h2>
          <ul class="animate not-prose flex flex-col gap-8">
            {renderedEntries
              .filter((entry) => entry.data.type === "entrepreneurial")
              .map((entry) => (
                <li class="space-y-2">
                  <div class="text-sm text-zinc-500 dark:text-zinc-400">
                    {formatDate(entry.data.dateStart)} -{" "}
                    {entry.data.dateEnd === "Current" ? "Current" : formatDate(entry.data.dateEnd)}
                  </div>
                  <div class="text-lg text-zinc-800 dark:text-zinc-100">{entry.data.company}</div>
                  <div class="text-zinc-500 dark:text-zinc-400">{entry.data.role}</div>
                  <div class="prose dark:prose-invert">
                    <entry.Content />
                  </div>
                </li>
              ))}
          </ul>
        </div>
        <br/><br/>
        {/* Divider */}
        <hr class="border-t border-zinc-200 dark:border-zinc-700" />
        <br/><br/>
        {/* Volunteer Experience Section */}
        <div id="volunteer-experience" class="space-y-6">
          <h2 class="animate text-lg font-semibold text-zinc-800 dark:text-zinc-200 underline underline-offset-4">
            Volunteer Experience
          </h2>
          <ul class="animate not-prose flex flex-col gap-8">
            {renderedEntries
              .filter((entry) => entry.data.type === "volunteer")
              .map((entry) => (
                <li class="space-y-2">
                  <div class="text-sm text-zinc-500 dark:text-zinc-400">
                    {formatDate(entry.data.dateStart)} -{" "}
                    {entry.data.dateEnd === "Current" ? "Current" : formatDate(entry.data.dateEnd)}
                  </div>
                  <div class="text-lg text-zinc-800 dark:text-zinc-100">{entry.data.company}</div>
                  <div class="text-zinc-500 dark:text-zinc-400">{entry.data.role}</div>
                  <div class="prose dark:prose-invert">
                    <entry.Content />
                  </div>
                </li>
              ))}
          </ul>
        </div>
      </div>
    </aside>
  </Container>
</Layout>
