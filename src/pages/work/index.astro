---
import { getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Container from "@components/Container.astro";
import { WORK } from "@consts";

const workEntries = await getCollection("work");
const renderedEntries = await Promise.all(
  workEntries
    .sort((a, b) => {
      // If either entry has 'Current' as dateEnd, handle that case
      if (a.data.dateEnd === 'Current') return -1;  // a comes first
      if (b.data.dateEnd === 'Current') return 1;   // b comes first
      
      // Otherwise compare the dateStart values
      return b.data.dateStart.valueOf() - a.data.dateStart.valueOf();
    })
    .map(async (entry) => {
      const { Content } = await entry.render();
      return { ...entry, Content };
    })
);

function formatDate(date: Date) {
  return date.toLocaleDateString('en-US', { 
    month: 'short',
    year: 'numeric'
  });
}
---

<Layout title={WORK.TITLE} description={WORK.DESCRIPTION}>
  <Container>
    <aside data-pagefind-ignore>
      <div class="space-y-10">
        <div class="animate font-semibold text-black dark:text-white">
          Work Experience
        </div>
        <ul class="animate not-prose flex flex-col gap-8">
          {
            renderedEntries.map((entry) => (
              <li class="space-y-2">
                <div class="text-sm text-zinc-500 dark:text-zinc-400">
                  {formatDate(entry.data.dateStart)} - {typeof entry.data.dateEnd === 'string' ? entry.data.dateEnd : formatDate(entry.data.dateEnd)}
                </div>
                <div class="text-lg text-zinc-800 dark:text-zinc-100">
                  {entry.data.company}
                </div>
                <div class="text-zinc-500 dark:text-zinc-400">
                  {entry.data.role}
                </div>
                <div class="prose dark:prose-invert">
                  <entry.Content />
                </div>
              </li>
            ))
          }
        </ul>
      </div>
    </aside>
  </Container>
</Layout>